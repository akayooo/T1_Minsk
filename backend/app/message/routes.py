from fastapi import APIRouter, UploadFile, Form, File, HTTPException, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, Literal, Dict
from datetime import datetime
from bson import ObjectId
import asyncio
import os
import uuid
from pathlib import Path
import logging
from slowapi import Limiter
from slowapi.util import get_remote_address

from app.services.s3_storage import get_photo_url
from app.services.kafka import update_message_with_ocr
from app.database import get_database
from app.cache import get_active_chat_cached, invalidate_chat_cache
from app.tasks.ocr_tasks import process_image_task

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/tickets", tags=["tickets"])

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE", 10 * 1024 * 1024))  # 10 MB
ALLOWED_FILE_TYPES = {"image/jpeg", "image/jpg", "image/png", "image/webp", "image/gif"}
RATE_LIMIT = os.getenv("RATE_LIMIT_PER_MINUTE", "60/minute")

limiter = Limiter(key_func=get_remote_address)

# WebSocket connections –º–µ–Ω–µ–¥–∂–µ—Ä
class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        # chat_id -> —Å–ø–∏—Å–æ–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.active_connections: Dict[str, list[WebSocket]] = {}
    
    async def connect(self, websocket: WebSocket, chat_id: str):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        await websocket.accept()
        if chat_id not in self.active_connections:
            self.active_connections[chat_id] = []
        self.active_connections[chat_id].append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É {chat_id}")
    
    def disconnect(self, websocket: WebSocket, chat_id: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        if chat_id in self.active_connections:
            self.active_connections[chat_id].remove(websocket)
            if not self.active_connections[chat_id]:
                del self.active_connections[chat_id]
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —á–∞—Ç–∞ {chat_id}")
    
    async def send_message(self, chat_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º —á–∞—Ç–∞"""
        if chat_id in self.active_connections:
            disconnected = []
            for connection in self.active_connections[chat_id]:
                try:
                    await connection.send_json(message)
                except:
                    disconnected.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for conn in disconnected:
                self.disconnect(conn, chat_id)
    
    async def broadcast(self, message: dict):
        """Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        for chat_id in list(self.active_connections.keys()):
            await self.send_message(chat_id, message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
ws_manager = ConnectionManager()

class KafkaMessageData(BaseModel):
    message_id: str
    chat_id: str
    telegram_chat_id: int
    flag: str
    message: str
    photo: Optional[str]
    date: str
    is_read: bool
    merge_text: str


class MessageCreate(BaseModel):
    telegram_chat_id: int
    flag: Literal["operator", "user"]
    message: str
    photo: Optional[str] = None

async def upload_to_s3(file_content: bytes, filename: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Minio S3."""
    image_url = await asyncio.to_thread(get_photo_url, file_content, filename)
    return image_url

async def get_active_chat_id(telegram_chat_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç _id –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ telegram_chat_id —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    chat_id_str = await get_active_chat_cached(telegram_chat_id)
    if chat_id_str:
        return ObjectId(chat_id_str)
    return None


def validate_file(file: UploadFile, max_size: int = MAX_FILE_SIZE) -> None:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
        max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    
    Raises:
        HTTPException: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if file.content_type not in ALLOWED_FILE_TYPES:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}. "
                   f"–†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_FILE_TYPES)}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if not file.filename:
        raise HTTPException(status_code=400, detail="–ò–º—è —Ñ–∞–π–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


async def save_message_to_db(message_data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MongoDB.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π dict –±–µ–∑ merge_text.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id –∏–ª–∏ None.
    """
    try:
        db = get_database()
        collection = db.messages
        
        if "chat_id" in message_data and isinstance(message_data["chat_id"], str):
            message_data["chat_id"] = ObjectId(message_data["chat_id"])
        
        result = await collection.insert_one(message_data)
        
        if result.inserted_id:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {result.inserted_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è —á–∞—Ç–∞ {message_data['chat_id']}")
            return str(result.inserted_id)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


async def send_to_kafka(topic: str, message_data: KafkaMessageData, partition_key: Optional[str] = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    Args:
        topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
        message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        partition_key: –ö–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é chat_id)
    """
    from aiokafka import AIOKafkaProducer
    import json
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka, —Ç–æ–ø–∏–∫ '{topic}'")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ –∫–ª—é—á –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    key = partition_key or message_data.chat_id
    
    producer = AIOKafkaProducer(
        bootstrap_servers=os.getenv('KAFKA_URL','localhost:9092'),
        key_serializer=lambda k: k.encode('utf-8') if k else None,
        value_serializer=lambda v: json.dumps(v).encode('utf-8'),
        compression_type='gzip',  # –°–∂–∞—Ç–∏–µ gzip (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤ Python)
        max_request_size=int(os.getenv('KAFKA_MAX_REQUEST_SIZE', 10485760)),
        request_timeout_ms=60000
    )
    
    try:
        await producer.start()
        
        await producer.send_and_wait(
            topic,
            key=key,
            value=message_data.model_dump()
        )
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_data.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka '{topic}' (key: {key})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DLQ (Dead Letter Queue)
        await send_to_dlq(topic, message_data, str(e))
        raise
    finally:
        await producer.stop()


async def send_to_dlq(original_topic: str, message_data: dict, error: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Dead Letter Queue –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    from aiokafka import AIOKafkaProducer
    import json
    
    try:
        dlq_message = {
            "original_topic": original_topic,
            "error": error,
            "timestamp": datetime.utcnow().isoformat(),
            "data": message_data if isinstance(message_data, dict) else message_data.model_dump()
        }
        
        producer = AIOKafkaProducer(
            bootstrap_servers=os.getenv('KAFKA_URL','localhost:9092'),
            value_serializer=lambda v: json.dumps(v).encode('utf-8')
        )
        
        await producer.start()
        await producer.send_and_wait('kafka_dlq', value=dlq_message)
        await producer.stop()
        
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ DLQ: {original_topic}")
    except Exception as dlq_error:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ DLQ: {dlq_error}")

@router.post("/add_message")
@limiter.limit(RATE_LIMIT)
async def add_message_handler(
    request: Request,
    telegram_chat_id: int = Form(...),
    text: str = Form(...),
    photo: Optional[UploadFile] = File(None) 
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
    3. –ó–∞–ø—É—Å–∫–∞–µ–º OCR —á–µ—Ä–µ–∑ Celery (—Å retry)
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    photo_url = None
    ocr_task_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    chat_id = await get_active_chat_id(telegram_chat_id)
    
    if not chat_id:
        raise HTTPException(
            status_code=404,
            detail="–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ /ticket"
        )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
    ocr_status = "NO_PHOTO"
    
    if photo:
        validate_file(photo)
        file_content = await photo.read()
        
        if len(file_content) > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413,
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / (1024*1024):.1f} MB"
            )
        
        if not file_content:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        photo_url = await upload_to_s3(file_content, photo.filename)
        ocr_status = "OCR_QUEUED"
        
    message_id = str(uuid.uuid4())
    
    if photo_url:
        try:
            task = process_image_task.delay(photo_url, message_id)
            ocr_task_id = task.id
            logger.info(f"OCR –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {ocr_task_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OCR –∑–∞–¥–∞—á–∏: {e}")
            ocr_status = "OCR_ERROR"
    
    current_date = datetime.utcnow().isoformat()
    
    # –°–æ–±—ã—Ç–∏–µ: TicketCreated
    kafka_data = KafkaMessageData(
        message_id=message_id,
        chat_id=str(chat_id),
        telegram_chat_id=telegram_chat_id,
        flag="user",
        message=text,
        photo=photo_url,
        date=current_date,
        is_read=False,
        merge_text=text  
    )
    
    await send_to_kafka("ticket_created", kafka_data, partition_key=str(chat_id))
    try:

        await send_to_kafka(
            topic="websocket_notifications",
            message_data=kafka_data,
            partition_key=str(chat_id)
        )
        logger.info(f"–°–æ–±—ã—Ç–∏–µ –¥–ª—è WebSocket –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kafka: {e}")
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. OCR: {ocr_status}, Task: {ocr_task_id}")
    
    return JSONResponse(
        status_code=200,
        content={
            "success": True,
            "message": "Message sent to Kafka",
            "message_id": message_id,
            "photo_url": photo_url,
            "ocr_status": ocr_status,
            "ocr_task_id": ocr_task_id,
            "telegram_chat_id": telegram_chat_id
        }
    )


@router.post("/message/create")
async def create_message(message: str = Form(...),telegram_chat_id: int = Form(...),photo: Optional[UploadFile] = File(None),flag: str = Form(...)):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä—É—á–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    telegram_chat_id: int
    flag: Literal["operator", "user"]
    message: str
    photo: Optional[str] = None
    Args:
        message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (telegram_chat_id, flag, message, photo)
    
    Returns:
        JSON —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat_id = await get_active_chat_id(telegram_chat_id)
        
        if not chat_id:
            raise HTTPException(
                status_code=404,
                detail="–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        current_date = datetime.utcnow().isoformat()
        message_id = str(uuid.uuid4())
        photo_url = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–æ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è MongoDB
        # message_for_db = {
        #     "chat_id": chat_id,
        #     "telegram_chat_id": message_data.telegram_chat_id,
        #     "flag": message_data.flag,
        #     "message": message_data.message,
        #     "photo": message_data.photo,
        #     "date": current_date,
        #     "is_read": False
        # }
        
        # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        # message_id = await save_message_to_db(message_for_db)
        
        if not message_id:
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
        
        if flag == 'operator':
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ –∫–ª—é—á –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ—Ä—è–¥–∫–∞
                key = str(chat_id)
                if photo:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                    validate_file(photo)
                    
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
                    file_content = await photo.read()
                    
                    if len(file_content) > MAX_FILE_SIZE:
                        raise HTTPException(
                            status_code=413,
                            detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / (1024*1024):.1f} MB"
                        )
                    
                    if not file_content:
                        raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø—É—Å—Ç–æ–π")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Minio S3
                    photo_url = await upload_to_s3(file_content, photo.filename)

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç KafkaMessageData –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π dict
                kafka_payload = {
                    "message_id": message_id,
                    "chat_id": str(chat_id),
                    "telegram_chat_id": telegram_chat_id,
                    "flag": flag,
                    "message": message,
                    "photo": photo_url,
                    "date": current_date, 
                    "is_read": False,
                    "merge_text": message
                }
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ Pydantic –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
                kafka_data_model = KafkaMessageData(**kafka_payload)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–∞ —Ç–æ–ø–∏–∫–∞:
                # - ticket_created –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                # - operator_replies –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                await asyncio.gather(
                    send_to_kafka("ticket_created", kafka_data_model, partition_key=key),
                    send_to_kafka("operator_replies", kafka_data_model, partition_key=key)
                )
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫–∏ 'ticket_created' –∏ 'operator_replies'")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ Kafka: {e}")
                raise
        
        return JSONResponse(
            status_code=201,
            content={
                "success": True,
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
                "message_id": message_id,
                "photo_url": photo_url  
            }
        )
    
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


@router.post("/update-ocr")
async def update_ocr_text(external_message_id: str = Form(...), ocr_text: str = Form(...)):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ Kafka (—Ç–æ–ø–∏–∫ ocr_processed).
    
    Args:
        external_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka
        ocr_text: –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π OCR
    
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    try:
        success = await update_message_with_ocr(external_message_id, ocr_text)
        
        if not success:
            raise HTTPException(
                status_code=404,
                detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "message": "OCR —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                "external_message_id": external_message_id
            }
        )
    
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ OCR —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


@router.get("/messages/{telegram_chat_id}")
async def get_chat_messages(
    telegram_chat_id: int, 
    limit: int = 50, 
    before_date: Optional[str] = None,
    active_only: bool = True
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        telegram_chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å 100)
        before_date: ISO –¥–∞—Ç–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã)
        active_only: –ü–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏ cursor –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        limit = min(limit, 100)
        
        db = get_database()
        
        query = {}
        
        if active_only:
            chat_id = await get_active_chat_id(telegram_chat_id)
            
            if not chat_id:
                return JSONResponse(
                    status_code=200,
                    content={
                        "success": True,
                        "count": 0,
                        "messages": [],
                        "next_cursor": None,
                        "info": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"
                    }
                )
            
            query["chat_id"] = chat_id
        else:
            query["telegram_chat_id"] = telegram_chat_id
        
        # Cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        if before_date:
            query["date"] = {"$lt": before_date}
        
        collection = db.messages
        cursor = collection.find(
            query,
            {"_id": 0}
        ).sort("date", -1).limit(limit + 1)  # +1 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        messages = await cursor.to_list(length=limit + 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        has_more = len(messages) > limit
        if has_more:
            messages = messages[:limit]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        messages.reverse()
        
        # Cursor –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        next_cursor = messages[0]["date"] if messages and has_more else None
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {telegram_chat_id}")
        
        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "count": len(messages),
                "messages": messages,
                "next_cursor": next_cursor,
                "has_more": has_more
            }
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )



