"""
Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import logging
from typing import Optional, Any
from redis import asyncio as aioredis
from functools import wraps

logger = logging.getLogger(__name__)

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
CACHE_TTL = int(os.getenv("REDIS_CACHE_TTL", "3600"))  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


class RedisCache:
    """Singleton –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫—ç—à–µ–º"""
    
    _instance = None
    _redis: Optional[aioredis.Redis] = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self._redis = await aioredis.from_url(
                REDIS_URL,
                encoding="utf-8",
                decode_responses=True,
                max_connections=50
            )
            await self._redis.ping()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: {REDIS_URL}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self._redis = None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if self._redis:
            await self._redis.close()
            logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if not self._redis:
            return None
        
        try:
            value = await self._redis.get(key)
            if value:
                logger.debug(f"Cache HIT: {key}")
                return json.loads(value)
            logger.debug(f"Cache MISS: {key}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis: {e}")
            return None
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        if not self._redis:
            return False
        
        try:
            ttl = ttl or CACHE_TTL
            serialized = json.dumps(value, default=str)
            await self._redis.setex(key, ttl, serialized)
            logger.debug(f"Cache SET: {key} (TTL: {ttl}s)")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis: {e}")
            return False
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if not self._redis:
            return False
        
        try:
            await self._redis.delete(key)
            logger.debug(f"üóëÔ∏è Cache DELETE: {key}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
        if not self._redis:
            return False
        
        try:
            return await self._redis.exists(key) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
            return False
    
    async def increment(self, key: str, amount: int = 1) -> Optional[int]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ (–¥–ª—è rate limiting)"""
        if not self._redis:
            return None
        
        try:
            return await self._redis.incrby(key, amount)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    async def expire(self, key: str, ttl: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –¥–ª—è –∫–ª—é—á–∞"""
        if not self._redis:
            return False
        
        try:
            await self._redis.expire(key, ttl)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTL: {e}")
            return False


# Singleton instance
cache = RedisCache()


def cached(ttl: Optional[int] = None, key_prefix: str = ""):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    Usage:
        @cached(ttl=600, key_prefix="user")
        async def get_user(user_id: int):
            return await db.users.find_one({"id": user_id})
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"{key_prefix}:{func.__name__}:{args}:{kwargs}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_result = await cache.get(cache_key)
            if cached_result is not None:
                return cached_result
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if result is not None:
                await cache.set(cache_key, result, ttl)
            
            return result
        
        return wrapper
    return decorator


async def get_active_chat_cached(telegram_chat_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Args:
        telegram_chat_id: Telegram chat ID
    
    Returns:
        chat_id (ObjectId –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏) –∏–ª–∏ None
    """
    cache_key = f"active_chat:{telegram_chat_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_chat_id = await cache.get(cache_key)
    if cached_chat_id:
        return cached_chat_id
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    from app.database import get_database
    
    try:
        db = get_database()
        collection = db.chats
        
        chat = await collection.find_one(
            {"telegram_chat_id": telegram_chat_id, "is_active": True}
        )
        
        if chat:
            chat_id = str(chat.get("_id"))
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
            await cache.set(cache_key, chat_id, ttl=3600)
            return chat_id
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")
        return None


async def invalidate_chat_cache(telegram_chat_id: int):
    """
    –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ —á–∞—Ç–∞ (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏)
    """
    cache_key = f"active_chat:{telegram_chat_id}"
    await cache.delete(cache_key)
    logger.info(f"–ö—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {telegram_chat_id}")

