import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import { Message } from '../types';
import { chatService } from '../services/api';

interface ChatMessagesProps {
  messages: Message[];
  isLoading?: boolean;
  getFullImageUrl?: (message: Message) => string;
  onSendMessage?: (message: string) => void;
}

const defaultGetFullImageUrl = (message: Message): string => {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ Docker, —Ç–∞–∫ –∏ –ª–æ–∫–∞–ª—å–Ω–æ)
  const currentHost = window.location.host; // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ—Ä—Ç
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π URL
  if (message.serverImageUrl) {
    console.log('Using server image URL:', message.serverImageUrl);
    // –ó–∞–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Docker URL –Ω–∞ nginx proxy —Å —Ç–µ–∫—É—â–∏–º —Ö–æ—Å—Ç–æ–º
    const publicUrl = message.serverImageUrl.replace('http://minio:9000', `http://${currentHost}/storage`);
    console.log('Converted to nginx proxy URL:', publicUrl);
    return publicUrl;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π imageUrl
  const imageUrl = message.imageUrl;
  if (!imageUrl) return '';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  console.log('Original image URL:', imageUrl);
  
  // –ï—Å–ª–∏ URL —è–≤–ª—è–µ—Ç—Å—è blob URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  if (imageUrl.startsWith('blob:')) {
    console.log('URL is a blob URL, using as is:', imageUrl);
    return imageUrl;
  }
  
  // –ï—Å–ª–∏ URL —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http, –∑–∞–º–µ–Ω—è–µ–º minio –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–æ–∫—Å–∏
  if (imageUrl.startsWith('http')) {
    console.log('URL already starts with http:', imageUrl);
    // –ó–∞–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Docker URL –Ω–∞ nginx proxy —Å —Ç–µ–∫—É—â–∏–º —Ö–æ—Å—Ç–æ–º
    const publicUrl = imageUrl.replace('http://minio:9000', `http://${currentHost}/storage`);
    console.log('Converted to nginx proxy URL:', publicUrl);
    return publicUrl;
  }
  
  // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
  const baseUrl = `http://${currentHost}`;
  const fullUrl = imageUrl.startsWith('/') ? `${baseUrl}${imageUrl}` : `${baseUrl}/${imageUrl}`;
  console.log('Converted to full URL:', fullUrl);
  return fullUrl;
};

const ChatMessages: React.FC<ChatMessagesProps> = ({ messages, isLoading = false, getFullImageUrl = defaultGetFullImageUrl, onSendMessage }) => {
  const messagesEndRef = React.createRef<HTMLDivElement>();
  const [copiedMessageIndex, setCopiedMessageIndex] = useState<number | null>(null);
  const [aiSuggestionsVisible, setAiSuggestionsVisible] = useState<number | null>(null);
  const [aiSuggestionsLoading, setAiSuggestionsLoading] = useState<number | null>(null);
  const [aiSuggestions, setAiSuggestions] = useState<{[key: number]: {answer: string, actions: string[]}}>({});
  const [aiSuggestionsTab, setAiSuggestionsTab] = useState<{[key: number]: 'answer' | 'actions'}>({});
  const [imageModalOpen, setImageModalOpen] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string>('');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, messagesEndRef]);

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    console.log('ChatMessages - messages updated:', JSON.stringify(messages));
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages.forEach((msg, index) => {
      console.log(`Message ${index}:`, {
        role: msg.role,
        content: msg.content || '–ü–£–°–¢–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï',
        timestamp: msg.timestamp,
        imageUrl: msg.imageUrl || '–ù–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø'
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (msg.imageUrl) {
        console.log(`Image URL for message ${index}:`, msg.imageUrl);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–π URL
        if (!msg.imageUrl.startsWith('http')) {
          console.log(`Image URL does not start with http, full URL should be: http://localhost:8080${msg.imageUrl.startsWith('/') ? '' : '/'}${msg.imageUrl}`);
        }
      }
    });
  }, [messages]);

  const formatTimestamp = (timestamp: string | undefined) => {
    if (!timestamp) {
      console.log('Invalid timestamp:', timestamp);
      return '';
    }
    
    try {
      const date = new Date(timestamp);
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(date.getTime())) {
        console.log('Invalid timestamp value:', timestamp);
        return '';
      }
      
      return new Intl.DateTimeFormat('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      }).format(date);
    } catch (error) {
      console.error('Error formatting timestamp:', error, timestamp);
      return '';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const isValidMessage = (message: any): message is Message => {
    return (
      message &&
      typeof message === 'object' &&
      typeof message.role === 'string' &&
      ['user', 'assistant'].includes(message.role) &&
      (message.content === undefined || message.content === null || typeof message.content === 'string') &&
      (message.imageUrl === undefined || message.imageUrl === null || typeof message.imageUrl === 'string')
    );
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getFullImageUrl

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const getMessageContent = (message: Message) => {
    if (message.content && message.content.trim() !== '') {
      return message.content;
    }
    return '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries
  const isWildberriesParsingResult = (content: string): boolean => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∏–ª–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
    return content.includes('## –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries') || 
           content.includes('## üõçÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries') || 
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∏–ª–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
           content.includes('### ') || 
           content.includes('### üîç') || 
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö —Å –∏–ª–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
           content.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã') || 
           content.includes('### ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyMessageToClipboard = (text: string, groupIndex: number) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedMessageIndex(groupIndex);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setCopiedMessageIndex(null);
      }, 2000);
    }).catch(err => {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', err);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ–¥—Å–∫–∞–∑–æ–∫
  const getAiSuggestions = async (message: Message, groupIndex: number) => {
    // –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–∂–µ –≤–∏–¥–Ω—ã, —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö
    if (aiSuggestionsVisible === groupIndex) {
      setAiSuggestionsVisible(null);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message.id) {
      console.error('Message ID is missing, cannot get AI hints');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      setAiSuggestions(prev => ({
        ...prev,
        [groupIndex]: { answer: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è', actions: [] }
      }));
      setAiSuggestionsTab(prev => ({
        ...prev,
        [groupIndex]: 'answer'
      }));
      setAiSuggestionsVisible(groupIndex);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    setAiSuggestionsLoading(groupIndex);
    setAiSuggestionsVisible(groupIndex);

    try {
      // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ML API —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
      const response = await chatService.getAiHints(message.id);
      
      console.log('AI hints received:', response);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞, —Ä–∞–∑–¥–µ–ª—è—è –Ω–∞ "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" –∏ "–î–µ–π—Å—Ç–≤–∏—è"
      let answerText = '';
      const actions: string[] = [];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (response.hints?.response_template) {
        answerText = response.hints.response_template;
      }
      // –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å relevant_docs, –±–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
      else if (response.relevant_docs && Array.isArray(response.relevant_docs) && response.relevant_docs.length > 0) {
        const mostRelevant = response.relevant_docs[0];
        if (mostRelevant.payload?.knowledge) {
          answerText = mostRelevant.payload.knowledge;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (response.hints?.suggested_actions && Array.isArray(response.hints.suggested_actions)) {
        response.hints.suggested_actions.forEach((action: any) => {
          if (typeof action === 'string') {
            actions.push(action);
          } else if (action.description) {
            actions.push(action.description);
          }
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!answerText && actions.length === 0) {
        answerText = 'AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      }
      
      setAiSuggestions(prev => ({
        ...prev,
        [groupIndex]: { answer: answerText, actions }
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É (–æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–µ–π—Å—Ç–≤–∏—è)
      setAiSuggestionsTab(prev => ({
        ...prev,
        [groupIndex]: answerText ? 'answer' : 'actions'
      }));
      
      setAiSuggestionsLoading(null);
    } catch (error: any) {
      console.error('Error getting AI hints:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫.';
      if (error.code === 'ECONNABORTED') {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. ML —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      setAiSuggestions(prev => ({
        ...prev,
        [groupIndex]: { answer: errorMessage, actions: [] }
      }));
      setAiSuggestionsTab(prev => ({
        ...prev,
        [groupIndex]: 'answer'
      }));
      setAiSuggestionsLoading(null);
    }
  };

  return (
    <div 
      className="flex-1 overflow-y-auto custom-scrollbar bg-dark-primary" 
      data-component-name="ChatMessages"
    >
      {messages.length === 0 ? (
        <div className="flex flex-col items-center justify-center h-full px-4 py-12">
          <div className="max-w-2xl w-full text-center space-y-6">
            <h2 className="text-2xl font-semibold text-white">–ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h2>
            <p className="text-dark-text/70 text-base max-w-md mx-auto">
              –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
            </p>
          </div>
        </div>
      ) : (
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
        (() => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          const validMessages = messages.filter(message => isValidMessage(message));
          const messageGroups = [];
          
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
          for (let i = 0; i < validMessages.length; i++) {
            const currentMessage = validMessages[i];
            const nextMessage = validMessages[i + 1];
            
            if (currentMessage.role === 'user') {
              // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
              if (nextMessage && nextMessage.role === 'assistant') {
                messageGroups.push({ userMessage: currentMessage, assistantMessage: nextMessage });
                i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
              } else {
                messageGroups.push({ userMessage: currentMessage, assistantMessage: null });
              }
            } else if (currentMessage.role === 'assistant') {
              // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
              messageGroups.push({ userMessage: null, assistantMessage: currentMessage });
            }
          }
          
          return (
            <div className="px-4 py-6 space-y-4">
              {messageGroups.map((group, groupIndex) => (
                <div 
                  key={groupIndex} 
                  className="space-y-3"
                >
                  {group.userMessage && (
                    <div className="flex justify-start">
                      <div className="flex items-start space-x-2 max-w-xs lg:max-w-md xl:max-w-lg">
                         <div className="w-8 h-8 rounded-full bg-dark-accent flex items-center justify-center flex-shrink-0 border border-dark-border/50">
                           <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 24 24" fill="currentColor">
                             <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                           </svg>
                         </div>
                        <div className="flex-1">
                          <div className="text-xs text-dark-text/50 mb-1 px-1">
                            –ö–ª–∏–µ–Ω—Ç
                          </div>
                         <div className="bg-dark-secondary/80 backdrop-blur-sm text-dark-text rounded-2xl rounded-tl-md px-4 py-2 shadow-lg border border-dark-border/50">
                          <div className="text-sm leading-relaxed">{getMessageContent(group.userMessage)}</div>
                          {group.userMessage.imageUrl && (
                            <div className="mt-2">
                              <img 
                                src={getFullImageUrl(group.userMessage)} 
                                alt="Uploaded by user" 
                                className="max-w-full h-auto rounded-xl max-h-60 object-cover cursor-pointer hover:opacity-80 transition-opacity"
                                onClick={() => {
                                  setSelectedImage(getFullImageUrl(group.userMessage));
                                  setImageModalOpen(true);
                                }}
                                onError={(e) => {
                                  const url = getFullImageUrl(group.userMessage);
                                  console.error('Error loading image:', {
                                    originalUrl: group.userMessage.imageUrl,
                                    serverUrl: group.userMessage.serverImageUrl,
                                    fullUrl: url,
                                    element: e.currentTarget
                                  });
                                  
                                  if (url.startsWith('blob:')) {
                                    console.log('Not retrying for blob URL');
                                    e.currentTarget.onerror = null;
                                    e.currentTarget.style.display = 'none';
                                    return;
                                  }
                                  
                                  if (url.includes('/api/images/')) {
                                    const imageId = url.split('/api/images/')[1];
                                    console.log('Trying alternative URL format with image ID:', imageId);
                                    e.currentTarget.src = `http://localhost:8080/api/images/${imageId}`;
                                    return;
                                  }
                                  e.currentTarget.onerror = null;
                                  e.currentTarget.style.display = 'none';
                                }}
                              />
                            </div>
                          )}
                          <div className="flex justify-start items-center gap-3 mt-1">
                            <button 
                              onClick={() => getAiSuggestions(group.userMessage, groupIndex)}
                              className="opacity-70 hover:opacity-100 transition-opacity duration-200 text-xs text-custom-blue hover:text-custom-blue/80 flex items-center gap-1"
                              title="AI –ø–æ–¥—Å–∫–∞–∑–∫–∏"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                              </svg>
                              AI –ø–æ–¥—Å–∫–∞–∑–∫–∏
                            </button>
                            <button 
                              onClick={() => copyMessageToClipboard(getMessageContent(group.userMessage), groupIndex)}
                              className="opacity-70 hover:opacity-100 transition-opacity duration-200 text-xs text-dark-text/70 hover:text-dark-text"
                              title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
                            >
                              {copiedMessageIndex === groupIndex ? (
                                <span className="text-custom-blue">‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ</span>
                              ) : (
                                '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
                              )}
                            </button>
                          </div>

                          {/* AI –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
                          {aiSuggestionsVisible === groupIndex && (
                            <div className="mt-2 p-3 bg-dark-accent/30 rounded-lg border border-custom-blue/30">
                              {aiSuggestionsLoading === groupIndex ? (
                                <div className="flex flex-col items-center justify-center py-4">
                                  <div className="relative w-12 h-12 mb-3">
                                    {/* –í–Ω–µ—à–Ω–µ–µ –≤—Ä–∞—â–∞—é—â–µ–µ—Å—è –∫–æ–ª—å—Ü–æ */}
                                    <div className="absolute inset-0 border-2 border-custom-blue/20 rounded-full"></div>
                                    <div className="absolute inset-0 border-2 border-transparent border-t-custom-blue rounded-full animate-spin"></div>
                                    
                                    {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π –∫—Ä—É–≥ */}
                                    <div className="absolute inset-2 bg-custom-blue/20 rounded-full animate-pulse"></div>
                                    
                                    {/* AI –∏–∫–æ–Ω–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
                                    <div className="absolute inset-0 flex items-center justify-center">
                                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-custom-blue" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                                      </svg>
                                    </div>
                                  </div>
                                  <span className="text-xs text-custom-blue font-medium animate-pulse">AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏</span>
                                </div>
                              ) : (
                                <div className="space-y-2">
                                  {/* –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" –∏ "–î–µ–π—Å—Ç–≤–∏—è" */}
                                  <div className="flex items-center gap-4 mb-3">
                                    {aiSuggestions[groupIndex]?.answer && (
                                      <button
                                        onClick={() => setAiSuggestionsTab(prev => ({ ...prev, [groupIndex]: 'answer' }))}
                                        className={`text-xs font-medium transition-colors ${
                                          aiSuggestionsTab[groupIndex] === 'answer'
                                            ? 'text-custom-blue border-b-2 border-custom-blue pb-1'
                                            : 'text-dark-text/60 hover:text-custom-blue/80 pb-1'
                                        }`}
                                      >
                                        –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                                      </button>
                                    )}
                                    {aiSuggestions[groupIndex]?.actions && aiSuggestions[groupIndex]?.actions.length > 0 && (
                                      <button
                                        onClick={() => setAiSuggestionsTab(prev => ({ ...prev, [groupIndex]: 'actions' }))}
                                        className={`text-xs font-medium transition-colors ${
                                          aiSuggestionsTab[groupIndex] === 'actions'
                                            ? 'text-custom-blue border-b-2 border-custom-blue pb-1'
                                            : 'text-dark-text/60 hover:text-custom-blue/80 pb-1'
                                        }`}
                                      >
                                        –î–µ–π—Å—Ç–≤–∏—è
                                      </button>
                                    )}
                                  </div>

                                  {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
                                  <div 
                                    onClick={() => {
                                      // –ù–∞—Ö–æ–¥–∏–º textarea –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
                                      let textToInsert = '';
                                      const currentTab = aiSuggestionsTab[groupIndex] || 'answer';
                                      const suggestions = aiSuggestions[groupIndex];
                                      
                                      if (currentTab === 'answer' && suggestions?.answer) {
                                        textToInsert = suggestions.answer;
                                      } else if (currentTab === 'actions' && suggestions?.actions) {
                                        textToInsert = suggestions.actions.map(a => `‚Ä¢ ${a}`).join('\n');
                                      }
                                      
                                      const textarea = document.querySelector('textarea[data-component-name="ChatInput"]') as HTMLTextAreaElement;
                                      if (textarea && textToInsert) {
                                        textarea.value = textToInsert;
                                        textarea.focus();
                                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É textarea
                                        textarea.style.height = 'auto';
                                        textarea.style.height = `${textarea.scrollHeight}px`;
                                        
                                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
                                        const extraHeight = Math.max(0, textarea.clientHeight - 44);
                                        const buttonsContainer = document.querySelector('div[data-component-name="ChatPage"]');
                                        if (buttonsContainer) {
                                          const sidebarVisible = document.querySelector('.w-64.opacity-100') !== null;
                                          buttonsContainer.setAttribute('style', `left: ${sidebarVisible ? '16rem' : '0'}; bottom: calc(5.5rem + ${extraHeight}px)`);
                                        }
                                      }
                                    }}
                                    className="p-3 bg-dark-secondary/50 rounded-md text-sm text-dark-text hover:bg-dark-secondary/80 cursor-pointer transition-colors border border-dark-border/30 hover:border-custom-blue/50"
                                  >
                                    {aiSuggestionsTab[groupIndex] === 'answer' ? (
                                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                                      <div className="whitespace-pre-wrap leading-relaxed">
                                        {aiSuggestions[groupIndex]?.answer || '–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞'}
                                      </div>
                                    ) : (
                                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                                      <div className="space-y-2">
                                        {aiSuggestions[groupIndex]?.actions && aiSuggestions[groupIndex]?.actions.length > 0 ? (
                                          aiSuggestions[groupIndex]?.actions.map((action, idx) => (
                                            <div key={idx} className="flex items-start gap-2">
                                              <span className="text-custom-blue mt-1">‚Ä¢</span>
                                              <span className="flex-1">{action}</span>
                                            </div>
                                          ))
                                        ) : (
                                          <div>–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</div>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                        </div>
                      </div>
                    </div>
                  )}
              
                  {group.assistantMessage && (
                    <div className="flex justify-end">
                      <div className="max-w-xs lg:max-w-md xl:max-w-lg">
                        <div className="text-xs text-dark-text/50 mb-1 text-right px-1">
                          –û–ø–µ—Ä–∞—Ç–æ—Ä (–í—ã)
                        </div>
                         <div className="bg-custom-blue/20 text-white rounded-2xl rounded-br-md px-4 py-2 shadow-lg border border-custom-blue/30">
                          <div className="text-sm leading-relaxed">{getMessageContent(group.assistantMessage)}</div>
                            {group.assistantMessage.imageUrl && (
                              <div className="mt-2">
                                <img 
                                  src={getFullImageUrl(group.assistantMessage)} 
                                  alt="Assistant response" 
                                  className="max-w-full h-auto rounded-xl max-h-60 object-cover cursor-pointer hover:opacity-80 transition-opacity"
                                  onClick={() => {
                                    setSelectedImage(getFullImageUrl(group.assistantMessage));
                                    setImageModalOpen(true);
                                  }}
                                  onError={(e) => {
                                    const url = getFullImageUrl(group.assistantMessage);
                                    console.error('Error loading image:', {
                                      originalUrl: group.assistantMessage.imageUrl,
                                      serverUrl: group.assistantMessage.serverImageUrl,
                                      fullUrl: url,
                                      element: e.currentTarget
                                    });
                                    
                                    if (url.startsWith('blob:')) {
                                      console.log('Not retrying for blob URL');
                                      e.currentTarget.onerror = null;
                                      e.currentTarget.style.display = 'none';
                                      return;
                                    }
                                    
                                    if (url.includes('/api/images/')) {
                                      const imageId = url.split('/api/images/')[1];
                                      console.log('Trying alternative URL format with image ID:', imageId);
                                      e.currentTarget.src = `http://localhost:8080/api/images/${imageId}`;
                                      return;
                                    }
                                    
                                    e.currentTarget.onerror = null;
                                    e.currentTarget.style.display = 'none';
                                  }}
                                />
                              </div>
                            )}
                          </div>
                         <div className="text-xs text-white/70 mt-1 text-right px-1">
                           {formatTimestamp(group.assistantMessage.timestamp)}
                         </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          );
        })()
      )}
      <div ref={messagesEndRef} />
      
      {/* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="h-32" aria-hidden="true"></div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {imageModalOpen && (
        <div 
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4"
          onClick={() => setImageModalOpen(false)}
        >
          <div className="relative max-w-5xl max-h-[90vh]">
            <button
              onClick={() => setImageModalOpen(false)}
              className="absolute -top-10 right-0 text-white hover:text-gray-300 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <img 
              src={selectedImage} 
              alt="Full size" 
              className="max-w-full max-h-[85vh] object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatMessages;
